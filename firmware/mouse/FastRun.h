#pragma once

#include <Arduino.h>
#include <vector>
#include <queue>
#include "TaskBase.h"
#include "config.h"

#include "motor.h"
extern Motor mt;
#include "fan.h"
extern Fan fan;
#include "imu.h"
extern IMU imu;
#include "encoder.h"
extern Encoder enc;
#include "reflector.h"
extern Reflector ref;

#include "SpeedController.h"
extern SpeedController sc;
#include "WallDetector.h"
extern WallDetector wd;

#include "Logger.h"
extern Logger lg;

#define FAST_RUN_TASK_PRIORITY  3
#define FAST_RUN_STACK_SIZE     8192
#define FAST_RUN_PERIOD         1000

#define FAST_END_REMAIN         6
#define FAST_ST_LOOK_AHEAD(v)   (6+10*v/100)
#define FAST_ST_FB_GAIN         20
#define FAST_CURVE_FB_GAIN      3.0f

//#define printf  lg.printf

class FastTrajectory {
  public:
    FastTrajectory() {
      reset();
    }
    virtual ~FastTrajectory() {
    }
    void reset() {
      last_index = -FAST_END_REMAIN;
    }
    Position getNextDir(const Position &cur, const float velocity) {
      int index_cur = getNextIndex(cur);
      Position dir = (getPosition(index_cur + 6) - cur).rotate(-cur.theta);
      float dt = 1.0f / velocity;
      float ff = (getPosition(last_index + 1).theta - getPosition(last_index).theta) / dt;
      dir.theta = ff + FAST_CURVE_FB_GAIN * atan2f(dir.y, dir.x);
      return dir;
    }
    float getRemain() const {
      return (getSize() - last_index) * interval;
    }
    Position getEndPosition() {
      return getPosition(getSize());
    }
  protected:
    int last_index;
    const float interval = 1.0f;
    virtual int size() const {
      return 180;
    }
    virtual Position position(int index) const {
      return Position(index * interval, 0, 0);
    }
    int getSize() const {
      return size();
    }
    Position getPosition(const int index) {
      return position(index);
    }
    int getNextIndex(const Position& pos) {
      for (int i = last_index;; i++) {
        Position target = getPosition(i);
        Position dir = (target - pos).rotate(-target.theta);
        if (dir.x > 0) {
          last_index = i;
          return last_index;
        }
      }
      return last_index;
    }
};

class F45: public FastTrajectory {
  public:
    F45(bool mirror = false) : mirror(mirror) {}
    const float velocity = 512.4646434154613;
    const float straight1 = 10.0f;
    const float straight2 = 28.639610403817208f;
  private:
    bool mirror;
    virtual int size() const {
      return 68;
    }
    virtual Position position(int index) const {
      static const float data[68 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999990, 0.0000041620, 0.0000166458}, {1.9999999934, 0.0000659679, 0.0001328140}, {2.9999999641, 0.0003358814, 0.0004477307}, {3.9999996661, 0.0010613256, 0.0010585529}, {4.9999970897, 0.0025840452, 0.0020594643}, {5.9999925164, 0.0053401068, 0.0035416759}, {6.9999834983, 0.0098516845, 0.0055922203}, {7.9999616041, 0.0167345798, 0.0082936938}, {8.9999124186, 0.0266838467, 0.0117231305}, {9.9998155428, 0.0404582780, 0.0159505084}, {10.9996435321, 0.0588804056, 0.0210387490}, {11.9993519043, 0.0828365003, 0.0270437175}, {12.9988861978, 0.1132746066, 0.0340141466}, {13.9981679205, 0.1511741230, 0.0419899208}, {14.9970911206, 0.1975647070, 0.0510022095}, {15.9955223870, 0.2534924202, 0.0610732966}, {16.9933008483, 0.3200075699, 0.0722162716}, {17.9902353161, 0.3981647088, 0.0844350292}, {18.9860910531, 0.4890226353, 0.0977242692}, {19.9805948602, 0.5936350423, 0.1120696252}, {20.9734323510, 0.7130147474, 0.1274475086}, {21.9642475387, 0.8481542690, 0.1438248534}, {22.9526428370, 0.9999864531, 0.1611606013}, {23.9381790597, 1.1693804134, 0.1794058028}, {24.9203826554, 1.3571415313, 0.1985036173}, {25.8987363401, 1.5640114554, 0.2183893129}, {26.8726919111, 1.7906523360, 0.2389915154}, {27.8416869348, 2.0376250626, 0.2602325501}, {28.8051447545, 2.3054000899, 0.2820287041}, {29.7624744893, 2.5943422183, 0.3042926148}, {30.7130726479, 2.9047104478, 0.3269332860}, {31.6563543266, 3.2366579787, 0.3498560879}, {32.5917382887, 3.5902323989, 0.3729628398}, {33.5186759547, 3.9653756945, 0.3961547651}, {34.4366636793, 4.3619108201, 0.4193313513}, {35.3452427513, 4.7795629996, 0.4423926133}, {36.2439993934, 5.2179660950, 0.4652405500}, {37.1325697279, 5.6766626073, 0.4877791446}, {38.0106698833, 6.1551036757, 0.5099143642}, {38.8780845062, 6.6526540676, 0.5315546334}, {39.7346763399, 7.1686184562, 0.5526138975}, {40.5803881733, 7.7022240198, 0.5730100773}, {41.4152428411, 8.2526567705, 0.5926675076}, {42.2393432233, 8.8190670006, 0.6115173827}, {43.0528680024, 9.4005692821, 0.6294977555}, {43.8560804545, 9.9962424673, 0.6465535384}, {44.6493192885, 10.6051434612, 0.6626371973}, {45.4329798536, 11.2263307273, 0.6777104031}, {46.2075139910, 11.8588524026, 0.6917431549}, {46.9734300341, 12.5017720825, 0.7047145866}, {47.7312921477, 13.1541695754, 0.7166129990}, {48.4816912028, 13.8151409024, 0.7274358593}, {49.2252565462, 14.4837984130, 0.7371897968}, {49.9626313187, 15.1592875586, 0.7458904021}, {50.6944557804, 15.8407879532, 0.7535630913}, {51.4213673110, 16.5275166470, 0.7602419211}, {52.1440004095, 17.2187372916, 0.7659689908}, {52.8629822493, 17.9137601398, 0.7707944422}, {53.5788990346, 18.6119420458, 0.7747764596}, {54.2923111986, 19.3126876065, 0.7779810321}, {55.0037308495, 20.0154612739, 0.7804800545}, {55.7136168440, 20.7197821378, 0.7823528121}, {56.4223747874, 21.4252318574, 0.7836831246}, {57.1303570333, 22.1314570766, 0.7845587194}, {57.8378576598, 22.8381694238, 0.7850712317}, {58.5450963885, 23.5451455119, 0.7853162047}, {59.2522271368, 24.2522284757, 0.7853923976}, {59.7487372729, 24.7487372729, 0.7853981634},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F90: public FastTrajectory {
  public:
    F90(bool mirror = false) : mirror(mirror) {}
    //    const float velocity = 604.3356976159932f;
    const float velocity = 500.0f;
    const float straight = 20.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 118;
    }
    virtual Position position(int index) const {
      static const float data[118 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999996, 0.0000024015, 0.0000096050}, {1.9999999978, 0.0000383123, 0.0000767763}, {2.9999999880, 0.0001942108, 0.0002587611}, {3.9999998919, 0.0006131739, 0.0006121703}, {4.9999994376, 0.0014942954, 0.0011926649}, {5.9999981767, 0.0030920694, 0.0020546472}, {6.9999947380, 0.0057149064, 0.0032509596}, {7.9999865525, 0.0097228026, 0.0048325916}, {8.9999694300, 0.0155250032, 0.0068483973}, {9.9999367854, 0.0235793324, 0.0093448246}, {10.9998781551, 0.0343888269, 0.0123656576}, {11.9997779951, 0.0484988157, 0.0159517745}, {12.9996152010, 0.0664924324, 0.0201409204}, {13.9993611080, 0.0889899335, 0.0249674984}, {14.9989776614, 0.1166441432, 0.0304623791}, {15.9984150054, 0.1501369497, 0.0366527292}, {16.9976110921, 0.1901728822, 0.0435618613}, {17.9964890190, 0.2374780185, 0.0512091043}, {18.9949551320, 0.2927952278, 0.0596096965}, {19.9928961845, 0.3568797223, 0.0687747013}, {20.9901789202, 0.4304915752, 0.0787109454}, {21.9866480141, 0.5143935003, 0.0894209817}, {22.9821242560, 0.6093470613, 0.1009030743}, {23.9764029442, 0.7161065561, 0.1131512088}, {24.9692534353, 0.8354121768, 0.1261551254}, {25.9604186444, 0.9679859776, 0.1399003756}, {26.9496138976, 1.1145296315, 0.1543684025}, {27.9365279167, 1.2757171129, 0.1695366435}, {28.9208230700, 1.4521895317, 0.1853786556}, {29.9021361179, 1.6445497930, 0.2018642614}, {30.8800793419, 1.8533614932, 0.2189597170}, {31.8542436923, 2.0791424379, 0.2366278986}, {32.8242012776, 2.3223609172, 0.2548285084}, {33.7895064193, 2.5834310137, 0.2735182976}, {34.7496999299, 2.8627119852, 0.2926513068}, {35.7043132696, 3.1605044271, 0.3121791199}, {36.6528740877, 3.4770478003, 0.3320511329}, {37.5949072104, 3.8125185801, 0.3522148344}, {38.5299408155, 4.1670298426, 0.3726160962}, {39.4575105747, 4.5406306115, 0.3931994737}, {40.3771680774, 4.9333054156, 0.4139085129}, {41.2884818388, 5.3449754982, 0.4346860636}, {42.1910405801, 5.7755003960, 0.4554796895}, {43.0844526535, 6.2246984018, 0.4762733820}, {43.9683317629, 6.6923752895, 0.4970670744}, {44.8422957746, 7.1783288651, 0.5178607668}, {45.7059668158, 7.6823490190, 0.5386544592}, {46.5589714528, 8.2042178229, 0.5594481516}, {47.4009408893, 8.7437096469, 0.5802418441}, {48.2315110987, 9.3005912410, 0.6010355365}, {49.0503229596, 9.8746218215, 0.6218292289}, {49.8570224461, 10.4655531969, 0.6426229213}, {50.6512607905, 11.0731298846, 0.6634166137}, {51.4326945836, 11.6970891839, 0.6842103062}, {52.2009859513, 12.3371613084, 0.7050039986}, {52.9558027344, 12.9930695326, 0.7257976910}, {53.6968185722, 13.6645302616, 0.7465913834}, {54.4237130652, 14.3512531693, 0.7673850758}, {55.1361719442, 15.0529413548, 0.7881787683}, {55.8338871729, 15.7692914387, 0.8089724607}, {56.5165570735, 16.4999936857, 0.8297661531}, {57.1838864865, 17.2447321691, 0.8505598455}, {57.8355868973, 18.0031849066, 0.8713535379}, {58.4713765254, 18.7750239615, 0.8921472304}, {59.0909804719, 19.5599156097, 0.9129409228}, {59.6941308605, 20.3575205154, 0.9337346152}, {60.2805669048, 21.1674938161, 0.9545283076}, {60.8500350427, 21.9894852960, 0.9753220000}, {61.4022890701, 22.8231395751, 0.9961156925}, {61.9370902133, 23.6680962133, 1.0169093849}, {62.4542072350, 24.5239898684, 1.0377030773}, {62.9534165574, 25.3904504903, 1.0584967697}, {63.4345023483, 26.2671034665, 1.0792904621}, {63.8972565961, 27.1535697511, 1.1000841546}, {64.3414792267, 28.0494660755, 1.1208778470}, {64.7669780837, 28.9544051325, 1.1416706162}, {65.1735793096, 29.8679917479, 1.1624354693}, {65.5611579223, 30.7898087150, 1.1831164760}, {65.9296520329, 31.7194192725, 1.2036566412}, {66.2790635862, 32.6563705974, 1.2239997505}, {66.6094583642, 33.6001959989, 1.2440906816}, {66.9209668952, 34.5504221070, 1.2638757096}, {67.2137828535, 35.5065739471, 1.2833028051}, {67.4881615519, 36.4681801517, 1.3023219223}, {67.7444193481, 37.4347740106, 1.3208852764}, {67.9829309079, 38.4058997287, 1.3389476085}, {68.2041262045, 39.3811158669, 1.3564664363}, {68.4084856674, 40.3599995670, 1.3734022898}, {68.5965394494, 41.3421471062, 1.3897189296}, {68.7688623484, 42.3271772530, 1.4053835480}, {68.9260698361, 43.3147333717, 1.4203669512}, {69.0688107488, 44.3044848720, 1.4346437201}, {69.1977660581, 45.2961275474, 1.4481923524}, {69.3136435636, 46.2893840470, 1.4609953806}, {69.4171728433, 47.2840045285, 1.4730394697}, {69.5090974044, 48.2797653007, 1.4843154907}, {69.5901723214, 49.2764685784, 1.4948185711}, {69.6611604015, 50.2739415683, 1.5045481223}, {69.7228258257, 51.2720352391, 1.5135078423}, {69.7759277584, 52.2706217798, 1.5217056957}, {69.8212165010, 53.2695932486, 1.5291538694}, {69.8594314435, 54.2688607119, 1.5358687051}, {69.8912943035, 55.2683515045, 1.5418706083}, {69.9175046105, 56.2680070542, 1.5471839361}, {69.9387349928, 57.2677806775, 1.5518368613}, {69.9556301920, 58.2676371211, 1.5558612169}, {69.9688014028, 59.2675498481, 1.5592923193}, {69.9788229150, 60.2674994787, 1.5621687728}, {69.9862277230, 61.2674718303, 1.5645322554}, {69.9915069157, 62.2674576568, 1.5664272884}, {69.9951058738, 63.2674510465, 1.5679009888}, {69.9974216746, 64.2674483883, 1.5690028089}, {69.9988000478, 65.2674474381, 1.5697842618}, {69.9995347997, 66.2674471211, 1.5702986363}, {69.9998660644, 67.2674470601, 1.5706007012}, {69.9999781981, 68.2674470569, 1.5707464019}, {69.9999991238, 69.2674470552, 1.5707925505}, {70.0000000000, 70.0000000097, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F135: public FastTrajectory {
  public:
    F135(bool mirror = false) : mirror(mirror) {}
    const float velocity = 499.1078324588942f;
    const float straight1 = 20.0f;
    const float straight2 = 12.279220607467037f;
  private:
    bool mirror;
    virtual int size() const {
      return 129;
    }
    virtual Position position(int index) const {
      static const float data[129 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999989, 0.0000042628, 0.0000170488}, {1.9999999931, 0.0000680736, 0.0001362242}, {2.9999999623, 0.0003445772, 0.0004588233}, {3.9999996619, 0.0010868838, 0.0010844904}, {4.9999983525, 0.0026468429, 0.0021104082}, {5.9999943459, 0.0054723746, 0.0036305078}, {6.9999834283, 0.0101028684, 0.0057347057}, {7.9999580602, 0.0171648790, 0.0085081736}, {8.9999055568, 0.0273683224, 0.0120306465}, {9.9998050285, 0.0415000138, 0.0163757748}, {10.9996248503, 0.0604151372, 0.0216105260}, {11.9993200802, 0.0850334393, 0.0277946409}, {12.9988283014, 0.1163305751, 0.0349801480}, {13.9980647099, 0.1553276123, 0.0432109411}, {14.9969199211, 0.2030842597, 0.0525224227}, {15.9952549183, 0.2606906686, 0.0629412164}, {16.9928960867, 0.3292558606, 0.0744849503}, {17.9896324828, 0.4098963281, 0.0871621142}, {18.9852123581, 0.5037298546, 0.1009719908}, {19.9793395772, 0.6118629698, 0.1159046608}, {20.9716715253, 0.7353773440, 0.1319410841}, {21.9618183551, 0.8753232261, 0.1490532543}, {22.9493417015, 1.0327081064, 0.1672044261}, {23.9337564876, 1.2084840180, 0.1863494141}, {24.9145319897, 1.4035380709, 0.2064349595}, {25.8910946327, 1.6186854384, 0.2274001628}, {26.8628338188, 1.8546582931, 0.2491769789}, {27.8291069945, 2.1120963689, 0.2716907692}, {28.7892450138, 2.3915432433, 0.2948609087}, {29.7425609673, 2.6934384718, 0.3186014404}, {30.6883613155, 3.0181126125, 0.3428217736}, {31.6259507892, 3.3657846518, 0.3674274201}, {32.5546452120, 3.7365601791, 0.3923207616}, {33.4737827677, 4.1304306288, 0.4174018427}, {34.3827326734, 4.5472726178, 0.4425692473}, {35.2809005733, 4.9868653542, 0.4677469139}, {36.1677169716, 5.4489300996, 0.4929245805}, {37.0426197225, 5.9331739538, 0.5181022472}, {37.9050544170, 6.4392900608, 0.5432799138}, {38.7544743833, 6.9669576091, 0.5684575804}, {39.5903411747, 7.5158421337, 0.5936352470}, {40.4121247857, 8.0855955764, 0.6188129137}, {41.2193041895, 8.6758566957, 0.6439905803}, {42.0113679332, 9.2862514863, 0.6691682469}, {42.7878141378, 9.9163931792, 0.6943459135}, {43.5481505039, 10.5658822456, 0.7195235801}, {44.2918950268, 11.2343069821, 0.7447012468}, {45.0185761218, 11.9212435275, 0.7698789134}, {45.7277331006, 12.6262563849, 0.7950565800}, {46.4189166323, 13.3488988509, 0.8202342466}, {47.0916887440, 14.0887130160, 0.8454119133}, {47.7456228380, 14.8452297851, 0.8705895799}, {48.3803043919, 15.6179696391, 0.8957672465}, {48.9953309474, 16.4064425358, 0.9209449131}, {49.5903126334, 17.2101486510, 0.9461225797}, {50.1648724700, 18.0285787589, 0.9713002464}, {50.7186463683, 18.8612142313, 0.9964779130}, {51.2512831642, 19.7075270909, 1.0216555796}, {51.7624452409, 20.5669809216, 1.0468332462}, {52.2518084536, 21.4390306681, 1.0720109129}, {52.7190626141, 22.3231235698, 1.0971885795}, {53.1639116752, 23.2186994760, 1.1223662461}, {53.5860737299, 24.1251908450, 1.1475439127}, {53.9852810576, 25.0420228471, 1.1727215794}, {54.3612806253, 25.9686143791, 1.1978992460}, {54.7138339984, 26.9043777978, 1.2230769126}, {55.0427177226, 27.8487200002, 1.2482545792}, {55.3477234224, 28.8010426668, 1.2734322458}, {55.6286578012, 29.7607422620, 1.2986099125}, {55.8853426888, 30.7272102035, 1.3237875791}, {56.1176153921, 31.6998339278, 1.3489652457}, {56.3253286248, 32.6779966005, 1.3741429123}, {56.5083507426, 33.6610782857, 1.3993205790}, {56.6665657863, 34.6484561207, 1.4244982456}, {56.7998734811, 35.6395043154, 1.4496759122}, {56.9081892702, 36.6335944078, 1.4748535788}, {56.9914445049, 37.6300963145, 1.5000312454}, {57.0495864026, 38.6283780724, 1.5252089121}, {57.0825781157, 39.6278070320, 1.5503865787}, {57.0903987416, 40.6277499704, 1.5755642453}, {57.0730433231, 41.6275730913, 1.6007419119}, {57.0305228419, 42.6266423803, 1.6259195786}, {56.9628642613, 43.6243245740, 1.6510972452}, {56.8701105006, 44.6199869862, 1.6762749118}, {56.7523203371, 45.6129986605, 1.7014525784}, {56.6095684024, 46.6027304334, 1.7266302450}, {56.4419451829, 47.5885549341, 1.7518079117}, {56.2495569444, 48.5698470440, 1.7769855783}, {56.0325256567, 49.5459847343, 1.8021632449}, {55.7909889486, 50.5163490366, 1.8273409115}, {55.5250998742, 51.4803250560, 1.8525185782}, {55.2350269077, 52.4373019974, 1.8776962448}, {54.9209539431, 53.3866731660, 1.9028739114}, {54.5830797920, 54.3278364064, 1.9280503389}, {54.2216348865, 55.2602021363, 1.9531807287}, {53.8369352798, 56.1832151633, 1.9781665743}, {53.4293997494, 57.0963764660, 2.0029071686}, {52.9995462874, 57.9992481246, 2.0273037972}, {52.5479850973, 58.8914614867, 2.0512605396}, {52.0754089349, 59.7727248438, 2.0746850490}, {51.5825832876, 60.6428283168, 2.0974893018}, {51.0703408586, 61.5016457304, 2.1195903134}, {50.5395700191, 62.3491385022, 2.1409108118}, {49.9912021967, 63.1853548128, 2.1613798656}, {49.4262059528, 64.0104290780, 2.1809334598}, {48.8455771383, 64.8245798117, 2.1995150164}, {48.2503278569, 65.6281049180, 2.2170758537}, {47.6414772236, 66.4213754883, 2.2335755817}, {47.0200466327, 67.2048319122, 2.2489824302}, {46.3870500147, 67.9789757043, 2.2632735074}, {45.7434855588, 68.7443582292, 2.2764349849}, {45.0903318193, 69.5015753498, 2.2884622109}, {44.4285417507, 70.2512579512, 2.2993597477}, {43.7590365522, 70.9940603167, 2.3091413344}, {43.0827009310, 71.7306494370, 2.3178297756}, {42.4003806992, 72.4616992785, 2.3254567562}, {41.7128779294, 73.1878788511, 2.3320625835}, {41.0209468531, 73.9098406418, 2.3376958605}, {40.3252918977, 74.6282152007, 2.3424130905}, {39.6265646209, 75.3436024650, 2.3462782181}, {38.9253603486, 76.0565625635, 2.3493621104}, {38.2222153759, 76.7676086259, 2.3517419804}, {37.5176055057, 77.4772032756, 2.3535007605}, {36.8119430246, 78.1857514078, 2.3547264283}, {36.1055740677, 78.8935952252, 2.3555112923}, {35.3987774197, 79.6010119623, 2.3559512418}, {34.6917626050, 80.3082106978, 2.3561449680}, {33.9846682176, 81.0153298720, 2.3561931623}, {33.6827201592, 81.3172798408, 2.3561944902},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class C180: public FastTrajectory {
  public:
    C180(bool mirror = false) : mirror(mirror) {}
    //    const float velocity = 555.4092772151779f;
    const float velocity = 500.0f;
    const float straight = 26.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 178;
    }
    virtual Position position(int index) const {
      static const float data[178 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999994, 0.0000030936, 0.0000123729}, {1.9999999963, 0.0000493829, 0.0000988858}, {2.9999999802, 0.0002501505, 0.0003331924}, {3.9999998213, 0.0007894354, 0.0007879764}, {4.9999991055, 0.0019233319, 0.0015344754}, {5.9999970048, 0.0039784877, 0.0026420129}, {6.9999912541, 0.0073501408, 0.0041775437}, {7.9999777669, 0.0124979437, 0.0062052144}, {8.9999496716, 0.0199446868, 0.0087859432}, {9.9998960810, 0.0302726899, 0.0119770192}, {10.9997996003, 0.0441196362, 0.0158317275}, {11.9996356159, 0.0621726290, 0.0203989991}, {12.9993699806, 0.0851664862, 0.0257230899}, {13.9989564123, 0.1138778516, 0.0318432904}, {14.9983331821, 0.1491190293, 0.0387936680}, {15.9974221382, 0.1917314120, 0.0466028434}, {16.9961252258, 0.2425829187, 0.0552938028}, {17.9943213589, 0.3025602090, 0.0648837473}, {18.9918636224, 0.3725607833, 0.0753839796}, {19.9885781516, 0.4534869365, 0.0867998303}, {20.9842608034, 0.5462415327, 0.0991306227}, {21.9786752231, 0.6517195440, 0.1123696775}, {22.9715515878, 0.7707987187, 0.1265043560}, {23.9625860335, 0.9043350590, 0.1415161437}, {24.9514393367, 1.0531567534, 0.1573807716}, {25.9377380181, 1.2180561336, 0.1740683750}, {26.9210747094, 1.3997805227, 0.1915436901}, {27.9010096168, 1.5990293905, 0.2097662848}, {28.8770724963, 1.8164475636, 0.2286908244}, {29.8487676557, 2.0526186035, 0.2482673685}, {30.8155753831, 2.3080583732, 0.2684416995}, {31.7769567264, 2.5832133804, 0.2891556773}, {32.7323591049, 2.8784552724, 0.3103476214}, {33.6812237908, 3.1940773873, 0.3319527157}, {34.6229881408, 3.5302922773, 0.3539034331}, {35.5570937309, 3.8872311255, 0.3761299791}, {36.4829941973, 4.2649420020, 0.3985607496}, {37.4001620590, 4.6633905517, 0.4211228003}, {38.3080928665, 5.0824597468, 0.4437424672}, {39.2063105357, 5.5219622779, 0.4663678916}, {40.0943551725, 5.9816731115, 0.4889933160}, {40.9717721914, 6.4613569233, 0.5116187404}, {41.8381125680, 6.9607682318, 0.5342441648}, {42.6929328393, 7.4796513982, 0.5568695892}, {43.5357959359, 8.0177412137, 0.5794950136}, {44.3662700980, 8.5747619980, 0.6021204380}, {45.1839293968, 9.1504279900, 0.6247458624}, {45.9883551020, 9.7444443661, 0.6473712869}, {46.7791356820, 10.3565072397, 0.6699967113}, {47.5558668035, 10.9863036613, 0.6926221357}, {48.3181513320, 11.6335116187, 0.7152475601}, {49.0655993316, 12.2978000371, 0.7378729845}, {49.7978280648, 12.9788287786, 0.7604984089}, {50.5144619927, 13.6762486427, 0.7831238333}, {51.2151344167, 14.3897029183, 0.8057492577}, {51.8994868949, 15.1188264838, 0.8283746821}, {52.5671684582, 15.8632453130, 0.8510001065}, {53.2178371858, 16.6225781631, 0.8736255309}, {53.8511602051, 17.3964365739, 0.8962509553}, {54.4668136916, 18.1844248685, 0.9188763797}, {55.0644828687, 18.9861401530, 0.9415018041}, {55.6438620084, 19.8011723164, 0.9641272285}, {56.2046544305, 20.6291040308, 0.9867526529}, {56.7465725030, 21.4695107515, 1.0093780773}, {57.2693388938, 22.3219625976, 1.0320035017}, {57.7726862035, 23.1860233442, 1.0546289261}, {58.2563563132, 24.0612497654, 1.0772543505}, {58.7201015399, 24.9471936320, 1.0998797749}, {59.1636846378, 25.8434017117, 1.1225051993}, {59.5868787970, 26.7494157687, 1.1451306237}, {59.9894676444, 27.6647725639, 1.1677560481}, {60.3712452436, 28.5890038551, 1.1903814725}, {60.7320160943, 29.5216363968, 1.2130068969}, {61.0715951329, 30.4621919401, 1.2356323213}, {61.3898085303, 31.4101893467, 1.2582577457}, {61.6864935599, 32.3651435242, 1.2808831701}, {61.9614981096, 33.3265646395, 1.3035085945}, {62.2146813599, 34.2939603249, 1.3261340189}, {62.4459137844, 35.2668356780, 1.3487594433}, {62.6550771494, 36.2446932619, 1.3713848677}, {62.8420645144, 37.2270331054, 1.3940102922}, {63.0067802315, 38.2133527024, 1.4166357166}, {63.1491399459, 39.2031470124, 1.4392611410}, {63.2690705956, 40.1959084605, 1.4618865654}, {63.3665107147, 41.1911291759, 1.4845119898}, {63.4414105445, 42.1882999253, 1.5071374142}, {63.4937317332, 43.1869092366, 1.5297628386}, {63.5234475025, 44.1864457008, 1.5523882630}, {63.5305426482, 45.1863979725, 1.5750136874}, {63.5150135393, 46.1862547695, 1.5976391118}, {63.4768681188, 47.1855048732, 1.6202645362}, {63.4161259031, 48.1836371280, 1.6428899606}, {63.3328179824, 49.1801404420, 1.6655153850}, {63.2269870206, 50.1745037866, 1.6881408094}, {63.0986870485, 51.1662184463, 1.7107662338}, {62.9479838110, 52.1547770041, 1.7333916582}, {62.7749546717, 53.1396724200, 1.7560170826}, {62.5796882589, 54.1204003121, 1.7786425070}, {62.3622844650, 55.0964589564, 1.8012679314}, {62.1228544471, 56.0673492872, 1.8238933558}, {61.8615206268, 57.0325748966, 1.8465187802}, {61.5784166900, 57.9916420349, 1.8691442046}, {61.2736875872, 58.9440596105, 1.8917696290}, {60.9474895333, 59.8893391899, 1.9143950534}, {60.5999893016, 60.8269971436, 1.9370204778}, {60.2313647898, 61.7565537353, 1.9596459022}, {59.8418051333, 62.6775322027, 1.9822713266}, {59.4315098489, 63.5894609005, 2.0048967510}, {59.0006888345, 64.4918733009, 2.0275221754}, {58.5495623689, 65.3843079931, 2.0501475998}, {58.0783611121, 66.2663086837, 2.0727730242}, {57.5873261051, 67.1374241966, 2.0953984486}, {57.0767087703, 67.9972084730, 2.1180238730}, {56.5467709108, 68.8452205711, 2.1406492974}, {55.9977835415, 69.6810265997, 2.1632747219}, {55.4300276447, 70.5041989569, 2.1859001463}, {54.8437944872, 71.3143154598, 2.2085255707}, {54.2393843042, 72.1109612412, 2.2311509951}, {53.6171062996, 72.8937287494, 2.2537764195}, {52.9772786460, 73.6622177483, 2.2764018439}, {52.3202284844, 74.4160353176, 2.2990272683}, {51.6462919244, 75.1547958525, 2.3216526927}, {50.9558140441, 75.8781210638, 2.3442781171}, {50.2491488903, 76.5856399780, 2.3669035415}, {49.5266579050, 77.2769905586, 2.3895289659}, {48.7887108326, 77.9518191341, 2.4121543903}, {48.0356862243, 78.6097796212, 2.4347798147}, {47.2679697301, 79.2505350776, 2.4574052391}, {46.4859540990, 79.8737577019, 2.4800306635}, {45.6900391789, 80.4791288341, 2.5026560879}, {44.8806319164, 81.0663389551, 2.5252815123}, {44.0581463573, 81.6350876869, 2.5479069367}, {43.2230036460, 82.1850837925, 2.5705323611}, {42.3756320258, 82.7160451761, 2.5931577855}, {41.5164656019, 83.2276997874, 2.6157832099}, {40.6459436964, 83.7197860784, 2.6384086343}, {39.7645118873, 84.1920521736, 2.6610340587}, {38.8726213318, 84.6442563460, 2.6836594831}, {37.9707279120, 85.0761656249, 2.7062848677}, {37.0592963878, 85.4875668749, 2.7288916299}, {36.1388131192, 85.8782936045, 2.7514133325}, {35.2097909856, 86.2482602624, 2.7737764350}, {34.2727652452, 86.5974632539, 2.7959084371}, {33.3282881655, 86.9259813107, 2.8177383549}, {32.3769208797, 87.2339765541, 2.8391971866}, {31.4192243553, 87.5216917355, 2.8602183646}, {30.4557559672, 87.7894494050, 2.8807381931}, {29.4870640744, 88.0376493451, 2.9006962655}, {28.5136812574, 88.2667655058, 2.9200358607}, {27.5361181815, 88.4773390147, 2.9387043153}, {26.5548616791, 88.6699762065, 2.9566533693}, {25.5703710112, 88.8453430840, 2.9738394826}, {24.5830741792, 89.0041592247, 2.9902241206}, {23.5933658992, 89.1471884278, 3.0057740071}, {22.6016070333, 89.2752363656, 3.0204613425}, {21.6081236267, 89.3891428998, 3.0342639863}, {20.6132066460, 89.4897745561, 3.0471656026}, {19.6171134532, 89.5780148166, 3.0591557665}, {18.6200681536, 89.6547618081, 3.0702300336}, {17.6222633631, 89.7209196969, 3.0803899682}, {16.6238624143, 89.7773911381, 3.0896431336}, {15.6250026114, 89.8250686257, 3.0980030421}, {14.6257960436, 89.8648323606, 3.1054890666}, {13.6263329921, 89.8975418659, 3.1121263137}, {12.6266849713, 89.9240293153, 3.1179454583}, {11.6269079836, 89.9450926584, 3.1229825431}, {10.6270434116, 89.9614937005, 3.1272787416}, {9.6271215185, 89.9739508073, 3.1308800881}, {8.6271638648, 89.9831336401, 3.1338371760}, {7.6271854685, 89.9896583183, 3.1362048254}, {6.6271954784, 89.9940857867, 3.1380417236}, {5.6271995375, 89.9969162660, 3.1394100402}, {4.6272009027, 89.9985857991, 3.1403750190}, {3.6272013419, 89.9994634684, 3.1410045501}, {2.6272014262, 89.9998503173, 3.1413687245}, {1.6272014319, 89.9999758529, 3.1415393740}, {0.6272014332, 89.9999970453, 3.1415896002}, {0.0000000000, 90.0000000000, 3.1415926536},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FV90: public FastTrajectory {
  public:
    FV90(bool mirror = false) : mirror(mirror) {}
    //    const float velocity = 376.7567762634798f;
    const float velocity = 400.0f;
    const float straight = 20.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 74;
    }
    virtual Position position(int index) const {
      static const float data[74 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999974, 0.0000099084, 0.0000396242}, {1.9999999836, 0.0001582550, 0.0003163160}, {2.9999997649, 0.0007996002, 0.0010637651}, {3.9999981462, 0.0025184350, 0.0025089531}, {4.9999914982, 0.0061225207, 0.0048689197}, {5.9999697922, 0.0126294505, 0.0083476698}, {6.9999123266, 0.0232531894, 0.0131332667}, {7.9997806871, 0.0393875192, 0.0193951522}, {8.9995088833, 0.0625826066, 0.0272817325}, {9.9989947677, 0.0945265955, 0.0369182635}, {10.9980861247, 0.1370178119, 0.0484050657}, {11.9965692544, 0.1919371677, 0.0618160950}, {12.9941564395, 0.2612229435, 0.0771978891}, {13.9904723194, 0.3468343849, 0.0945689038}, {14.9850453230, 0.4507249818, 0.1139192506}, {15.9772982016, 0.5748080924, 0.1352108372}, {16.9665435257, 0.7209209343, 0.1583779106}, {17.9519824062, 0.8907977158, 0.1833279937}, {18.9327089609, 1.0860322246, 0.2099432032}, {19.9077176352, 1.3080508838, 0.2380819294}, {20.8759167405, 1.5580858405, 0.2675808538}, {21.8361492308, 1.8371481252, 0.2982572764}, {22.7872113860, 2.1460118516, 0.3299117189}, {23.7278843145, 2.4851974032, 0.3623307672}, {24.6569606502, 2.8549632137, 0.3952901122}, {25.5732769469, 3.2553032531, 0.4285577460}, {26.4757451636, 3.6859520816, 0.4619107142}, {27.3633502063, 4.1464567900, 0.4952647808}, {28.2351047076, 4.6363051151, 0.5286188474}, {29.0900389427, 5.1549521580, 0.5619729141}, {29.9272018811, 5.7018209748, 0.5953269807}, {30.7456622831, 6.2763032419, 0.6286810473}, {31.5445096860, 6.8777598999, 0.6620351139}, {32.3228554768, 7.5055219073, 0.6953891805}, {33.0798338117, 8.1588909319, 0.7287432471}, {33.8146026555, 8.8371401898, 0.7620973138}, {34.5263446374, 9.5395151836, 0.7954513804}, {35.2142680430, 10.2652346185, 0.8288054470}, {35.8776076127, 11.0134911897, 0.8621595136}, {36.5156254726, 11.7834525649, 0.8955135802}, {37.1276118806, 12.5742622256, 0.9288676469}, {37.7128860836, 13.3850405021, 0.9622217135}, {38.2707970156, 14.2148854746, 0.9955757801}, {38.8007240717, 15.0628740464, 1.0289298467}, {39.3020777586, 15.9280629109, 1.0622839133}, {39.7743003798, 16.8094896486, 1.0956379799}, {40.2168666372, 17.7061737643, 1.1289920466}, {40.6292903190, 18.6171151147, 1.1623167000}, {41.0112151356, 19.5412593409, 1.1954265860}, {41.3625303804, 20.4774685823, 1.2280875854}, {41.6833894526, 21.4245509009, 1.2600719415}, {41.9742097810, 22.3812863308, 1.2911615391}, {42.2356654914, 23.3464629347, 1.3211510127}, {42.4686757893, 24.3189020524, 1.3498506723}, {42.6743885424, 25.2974827002, 1.3770892067}, {42.8541543750, 26.2811643711, 1.4027161244}, {43.0095055332, 27.2689996119, 1.4266038977}, {43.1421236768, 28.2601463953, 1.4486497804}, {43.2538082633, 29.2538729996, 1.4687772714}, {43.3464482405, 30.2495590201, 1.4869372048}, {43.4219828851, 31.2466912131, 1.5031084507}, {43.4823742826, 32.2448574676, 1.5172982161}, {43.5295732022, 33.2437369394, 1.5295419422}, {43.5654853326, 34.2430872281, 1.5399027996}, {43.5919468967, 35.2427340853, 1.5484707879}, {43.6106916862, 36.2425564252, 1.5553614534}, {43.6233278241, 37.2424752851, 1.5607142428}, {43.6313145517, 38.2424428671, 1.5646905160}, {43.6359382036, 39.2424317946, 1.5674712471}, {43.6382971770, 40.2424288717, 1.5692544453}, {43.6392839370, 41.2424283711, 1.5702523341}, {43.6395725966, 42.2424283079, 1.5706883266}, {43.6396100947, 43.2424283071, 1.5707938426}, {43.6396103068, 43.6396103128, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FS90: public FastTrajectory {
  public:
    FS90(bool mirror = false) : mirror(mirror) {}
    const float velocity = 345.3346843519961;
    const float straight = 5.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 68;
    }
    virtual Position position(int index) const {
      static const float data[68 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999969, 0.0000128655, 0.0000514475}, {1.9999999767, 0.0002054567, 0.0004105330}, {2.9999995941, 0.0010374504, 0.0013796779}, {3.9999969172, 0.0032655949, 0.0032509596}, {4.9999857301, 0.0079326054, 0.0063011584}, {5.9999493780, 0.0163467153, 0.0107870647}, {6.9998538431, 0.0300624008, 0.0169411245}, {7.9996350035, 0.0508515233, 0.0249674984}, {8.9991859300, 0.0806730363, 0.0350385993}, {9.9983403107, 0.1216405145, 0.0472921695}, {10.9968538204, 0.1759799367, 0.0618289446}, {11.9943880293, 0.2459950543, 0.0787109454}, {12.9904908870, 0.3340180492, 0.0979604269}, {13.9845840564, 0.4423685588, 0.1195595000}, {14.9759507350, 0.5733061612, 0.1434504358}, {15.9637303686, 0.7289811107, 0.1695366435}, {16.9469187946, 0.9113935790, 0.1976843091}, {17.9243774449, 1.1223431750, 0.2277246639}, {18.8948464476, 1.3633940454, 0.2594568460}, {19.8569711939, 1.6358354803, 0.2926513068}, {20.8093302309, 1.9406532983, 0.3270537027}, {21.7504727755, 2.2785083279, 0.3623892082}, {22.6789624336, 2.6497217809, 0.3983671757}, {23.5934181942, 3.0542717129, 0.4346860636}, {24.4925590437, 3.4918050160, 0.4710749589}, {25.3751867882, 3.9617602514, 0.5074639206}, {26.2401328195, 4.4635151936, 0.5438528823}, {27.0862519384, 4.9964055128, 0.5802418441}, {27.9124238790, 5.5597256597, 0.6166308058}, {28.7175547731, 6.1527297870, 0.6530197675}, {29.5005786299, 6.7746327593, 0.6894087293}, {30.2604587044, 7.4246111597, 0.7257976910}, {30.9961889225, 8.1018044233, 0.7621866527}, {31.7067951532, 8.8053159237, 0.7985756145}, {32.3913365638, 9.5342142216, 0.8349645762}, {33.0489067970, 10.2875342296, 0.8713535379}, {33.6786352395, 11.0642785631, 0.9077424997}, {34.2796881090, 11.8634187856, 0.9441314614}, {34.8512696189, 12.6838968453, 0.9805204231}, {35.3926229776, 13.5246264040, 1.0169093849}, {35.9030314371, 14.3844943415, 1.0532983466}, {36.3818192040, 15.2623621717, 1.0896873083}, {36.8283523630, 16.1570675965, 1.1260762701}, {37.2420453643, 17.0674235213, 1.1624354693}, {37.6224679368, 17.9921777631, 1.1985378943}, {37.9695038062, 18.9299730998, 1.2340801324}, {38.2833796418, 19.8793847084, 1.2687680306}, {38.5646639140, 20.8389599480, 1.3023219223}, {38.8142540108, 21.8072671782, 1.3344813692}, {39.0333589784, 22.7829286628, 1.3650095780}, {39.2234697785, 23.7646563211, 1.3936974146}, {39.3863253498, 24.7512761981, 1.4203669512}, {39.5238753350, 25.7417457896, 1.4448744823}, {39.6382318381, 26.7351647260, 1.4671129624}, {39.7316305952, 27.7307770380, 1.4870138203}, {39.8063777491, 28.7279666694, 1.5045481223}, {39.8648076788, 29.7262484751, 1.5197270625}, {39.9092361539, 30.7252542911, 1.5326017732}, {39.9419142574, 31.7247152858, 1.5432624578}, {39.9649916098, 32.7244460959, 1.5518368613}, {39.9804720233, 33.7243243272, 1.5584881043}, {39.9901831909, 34.7242761652, 1.5634119167}, {39.9957418185, 35.7242602587, 1.5668333195}, {39.9985266444, 36.7242561425, 1.5690028089}, {39.9996557964, 37.7242554891, 1.5701921086}, {39.9999659232, 38.7242554139, 1.5706895630}, {39.9999999178, 39.7242554131, 1.5707952473}, {40.0000000000, 40.0000000055, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FastRun: TaskBase {
  public:
    FastRun() {}
    enum FAST_ACTION : char {
      FAST_GO_STRAIGHT = 's',
      FAST_GO_HALF = 'x',
      FAST_DIAGONAL_LEFT = 'w',
      FAST_DIAGONAL_RIGHT = 'W',
      FAST_TURN_LEFT_45 = 'z',
      FAST_TURN_RIGHT_45 = 'c',
      FAST_TURN_LEFT_45R = 'Z',
      FAST_TURN_RIGHT_45R = 'C',
      FAST_TURN_LEFT_90 = 'l',
      FAST_TURN_RIGHT_90 = 'r',
      FAST_TURN_LEFT_V90 = 'p',
      FAST_TURN_RIGHT_V90 = 'P',
      FAST_TURN_LEFT_S90 = 'q',
      FAST_TURN_RIGHT_S90 = 'Q',
      FAST_TURN_LEFT_135 = 'a',
      FAST_TURN_RIGHT_135 = 'd',
      FAST_TURN_LEFT_135R = 'A',
      FAST_TURN_RIGHT_135R = 'D',
      FAST_TURN_LEFT_180 = 'u',
      FAST_TURN_RIGHT_180 = 'U',
    };
    struct RunParameter {
      RunParameter(const float curve_gain = 0.8, const float max_speed = 1200, const float accel = 6000, const float decel = 6000): curve_gain(curve_gain), max_speed(max_speed), accel(accel), decel(decel) {}
      float curve_gain;
      float max_speed;
      float accel, decel;
      const RunParameter& operator=(const RunParameter& obj) {
        curve_gain = obj.curve_gain; max_speed = obj.max_speed; accel = obj.accel; decel = obj.decel;
        return *this;
      }
    };
  public:
    RunParameter runParameter;
    bool wallAvoidFlag = true;
    bool wallAvoid45Flag = true;
    bool wallCutFlag = true;
    bool V90Enabled = true;
    float fanDuty = 0.4f;

    void enable() {
      printf("FastRun Enabled\n");
      deleteTask();
      createTask("FastRun", FAST_RUN_TASK_PRIORITY, FAST_RUN_STACK_SIZE);
    }
    void disable() {
      deleteTask();
      sc.disable();
      path = "";
      printf("FastRun Disabled\n");
    }
    void set_action(FAST_ACTION action, const int num = 1) {
      for (int i = 0; i < num; i++) path += (char)action;
    }
    void set_path(String path) {
      this->path = path;
    }
    String get_last_path() {
      return last_path;
    }
    int actions() const {
      return path.length();
    }
    void waitForEnd() const {
      while (actions()) {
        delay(1);
      }
    }
    void printPosition(const char* name) const {
      printf("%s\tRel:(%06.1f, %06.1f, %06.3f)\t", name, getRelativePosition().x, getRelativePosition().y, getRelativePosition().theta);
      printf("Abs:(%06.1f, %06.1f, %06.3f)\n", sc.position.x, sc.position.y, sc.position.theta);
    }
    Position getRelativePosition() const {
      return (sc.position - origin).rotate(-origin.theta);
    }
    void updateOrigin(Position passed) {
      origin += passed.rotate(origin.theta);
    }
    void setPosition(Position pos = Position(SEGMENT_WIDTH / 2, WALL_THICKNESS / 2 + MACHINE_TAIL_LENGTH, M_PI / 2)) {
      origin = pos;
      sc.position = pos;
    }
  private:
    Position origin;
    String path, last_path;
    bool prev_wall[2];

    void wallAvoid() {
      // 90 [deg] の倍数
      if (wallAvoidFlag && (int)(fabs(origin.theta) * 180.0f / PI + 1) % 90 < 2) {
        const float gain = 0.0003f;
        const float satu = 0.3f;
        if (ref.side(0) > 60) sc.position += Position(0, std::max(std::min(wd.wall_diff.side[0] * gain, satu), -satu), 0).rotate(origin.theta);
        if (ref.side(1) > 60) sc.position -= Position(0, std::max(std::min(wd.wall_diff.side[1] * gain, satu), -satu), 0).rotate(origin.theta);
        led = 9;
      }
      // 45 [deg] の倍数
      if (wallAvoid45Flag && (int)(fabs(origin.theta) * 180.0f / PI + 45 + 1) % 90 < 2) {
        const float gain = 0.001f;
        const int16_t threashold = 480;
        if (ref.side(0) > threashold) sc.position += Position(0, (ref.side(0) - threashold) * gain, 0).rotate(origin.theta);
        if (ref.side(1) > threashold) sc.position -= Position(0, (ref.side(1) - threashold) * gain, 0).rotate(origin.theta);
        led = 6;
      }
    }
    void wallCut() {
      if (wallCutFlag) {
        // 90 [deg] の倍数 かつ，ズレが +/-15度以内
        if ((int)(fabs(origin.theta) * 180.0f / PI + 1) % 90 < 2 && fabs(origin.theta - sc.position.theta) < PI / 48) {
          for (int i = 0; i < 2; i++) {
            if (prev_wall[i] && !wd.wall[i]) {
              Position prev = sc.position;
              Position fix = sc.position.rotate(-origin.theta);
              fix.x = floor((fix.x + SEGMENT_WIDTH / 2) / SEGMENT_WIDTH) * SEGMENT_WIDTH - 20;
              fix = fix.rotate(origin.theta);
              if (fabs(prev.rotate(-origin.theta).x - fix.rotate(-origin.theta).x) < 15.0f)
                sc.position = fix;
              printf("WallCut[%d] X_ (%.1f, %.1f, %.1f) => (%.1f, %.1f, %.1f)\n", i, prev.x, prev.y, prev.theta * 180.0f / PI, sc.position.x, sc.position.y, sc.position.theta * 180 / PI);
            }
            if (!prev_wall[i] && wd.wall[i]) {
              Position prev = sc.position;
              Position fix = sc.position.rotate(-origin.theta);
              fix.x = floor((fix.x + SEGMENT_WIDTH / 2) / SEGMENT_WIDTH) * SEGMENT_WIDTH - 30;
              fix = fix.rotate(origin.theta);
              if (fabs(prev.rotate(-origin.theta).x - fix.rotate(-origin.theta).x) < 15.0f)
                sc.position = fix;
              printf("WallCut[%d] _X (%.1f, %.1f, %.1f) => (%.1f, %.1f, %.1f)\n", i, prev.x, prev.y, prev.theta * 180.0f / PI, sc.position.x, sc.position.y, sc.position.theta * 180 / PI);
            }
            prev_wall[i] = wd.wall[i];
          }
        }
        // 45 [deg] の倍数 かつ，ズレが +/-15度以内
        //        if ((int)(fabs(origin.theta) * 180.0f / PI + 45 + 1) % 90 < 2 && fabs(origin.theta - sc.position.theta) < PI / 48) {
        //          for (int i = 0; i < 2; i++) {
        //            if (prev_wall[i] && !wd.wall[i]) {
        //              Position prev = sc.position;
        //              Position fix = sc.position.rotate(-origin.theta);
        //              const float extra = 40;
        //              if (i == 0) {
        //                fix.x = floor((fix.x + extra) / SEGMENT_DIAGONAL_WIDTH) * SEGMENT_DIAGONAL_WIDTH + SEGMENT_DIAGONAL_WIDTH / 2 + extra;
        //              } else {
        //                fix.x = floor((fix.x + SEGMENT_DIAGONAL_WIDTH / 2 + extra) / SEGMENT_DIAGONAL_WIDTH) * SEGMENT_DIAGONAL_WIDTH + extra;
        //              }
        //              fix = fix.rotate(origin.theta);
        //              if (fabs(prev.rotate(-origin.theta).x - fix.rotate(-origin.theta).x) < 15.0f)
        //                sc.position = fix;
        //              printf("WallCutDiag[%d] X_ (%.1f, %.1f, %.1f) => (%.1f, %.1f, %.1f)\n", i, prev.x, prev.y, prev.theta * 180.0f / PI, sc.position.x, sc.position.y, sc.position.theta * 180 / PI);
        //            }
        //            prev_wall[i] = wd.wall[i];
        //          }
        //        }
      }
    }
    void straight_x(const float distance, const float v_max, const float v_end) {
      const float accel = runParameter.accel;
      const float decel = runParameter.decel;
      int ms = 0;
      const float v_start = sc.actual.trans;
      const float T = 1.5f * (v_max - v_start) / accel;
      portTickType xLastWakeTime = xTaskGetTickCount();
      for (int i = 0; i < 2; i++) prev_wall[i] = wd.wall[i];
      while (1) {
        Position cur = getRelativePosition();
        if (v_end >= 1.0f && cur.x > distance - FAST_END_REMAIN) break;
        if (v_end < 1.0f && cur.x > distance - 1.0f) break;
        float extra = distance - cur.x - FAST_END_REMAIN;
        float velocity_a = v_start + (v_max - v_start) * 6.0f * (-1.0f / 3 * pow(ms / 1000.0f / T, 3) + 1.0f / 2 * pow(ms / 1000.0f / T, 2));
        float velocity_d = sqrt(2 * decel * fabs(extra) + v_end * v_end);
        float velocity = v_max;
        if (velocity > velocity_d) velocity = velocity_d;
        if (ms / 1000.0f < T && velocity > velocity_a) velocity = velocity_a;
        float theta = atan2f(-cur.y, FAST_ST_LOOK_AHEAD(velocity)) - cur.theta;
        sc.set_target(velocity, FAST_ST_FB_GAIN * theta);
        wallAvoid();
        wallCut();
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        ms++;
      }
      sc.set_target(v_end, 0);
      updateOrigin(Position(distance, 0, 0));
      printPosition("Straight End");
    }
    template<class C>
    void trace(C tr, const float velocity) {
      portTickType xLastWakeTime = xTaskGetTickCount();
      for (int i = 0; i < 2; i++) prev_wall[i] = wd.wall[i];
      while (1) {
        if (tr.getRemain() < FAST_END_REMAIN) break;
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        Position dir = tr.getNextDir(getRelativePosition(), velocity);
        sc.set_target(velocity, dir.theta);
        if (fabs(getRelativePosition().theta) < 0.01f * PI) {
          wallAvoid();
          wallCut();
        }
      }
      sc.set_target(velocity, 0);
      updateOrigin(tr.getEndPosition());
      printPosition("Trace End");
    }
    virtual void task() {
      // スタートとゴールの半区画分を追加
      if (path[0] != 'x' && path[0] != 'c' && path[0] != 'z') {
        path = "x" + path + "x";
      }
      printf("Input Path: %s\n", path.c_str());
      if (V90Enabled) {
        path.replace("s", "xx");
        path.replace("l", "LL");
        path.replace("r", "RR");

        path.replace("RLLLLR", "RLpLR");
        path.replace("LRRRRL", "LRPRL");

        path.replace("xLLR", "zLR");
        path.replace("xRRL", "cRL");
        path.replace("LRRx", "LRC");
        path.replace("RLLx", "RLZ");

        path.replace("xLLLLR", "aLR");
        path.replace("xRRRRL", "dRL");
        path.replace("RLLLLx", "RLA");
        path.replace("LRRRRx", "LRD");

        path.replace("xLLLLx", "u");
        path.replace("xRRRRx", "U");

        path.replace("RLLR", "RLwLR");
        path.replace("LRRL", "LRWRL");

        path.replace("RL", "");
        path.replace("LR", "");
        path.replace("xRRx", "r");
        path.replace("xLLx", "l");
      } else {
        path.replace("s", "xx");

        path.replace("xllx", "u");
        path.replace("xrrx", "U");

        path.replace("l", "q");
        path.replace("r", "Q");
      }
      printf("Running Path: %s\n", path.c_str());

      const float v_max = runParameter.max_speed;
      const float curve_gain = runParameter.curve_gain;
      // 壁に背中を確実につける
      mt.drive(-200, -200);
      delay(200);
      mt.free();
      // 走行開始
      fan.drive(fanDuty);
      delay(500); //< ファンの回転数が一定なるのを待つ
      //      lg.start();
      setPosition();
      sc.enable(false); //< 速度コントローラ始動
      float straight = SEGMENT_WIDTH / 2 - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2;
      for (int path_index = 0; path_index < path.length(); path_index++) {
        //        printPosition(String(path[path_index]).c_str());
        printf("FastRun: %c, st => %.1f\n", path[path_index], straight);
        switch (path[path_index]) {
          case FAST_TURN_LEFT_45: {
              F45 tr(false);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_RIGHT_45: {
              F45 tr(true);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_LEFT_45R: {
              F45 tr(false);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_RIGHT_45R: {
              F45 tr(true);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_LEFT_V90: {
              FV90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_V90: {
              FV90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_S90: {
              FS90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_S90: {
              FS90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_90: {
              F90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_90: {
              F90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_135: {
              F135 tr(false);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_RIGHT_135: {
              F135 tr(true);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_LEFT_135R: {
              F135 tr(false);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_RIGHT_135R: {
              F135 tr(true);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_LEFT_180: {
              C180 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_180: {
              C180 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_GO_STRAIGHT:
            straight += SEGMENT_WIDTH;
            break;
          case FAST_GO_HALF:
            straight += SEGMENT_WIDTH / 2;
            break;
          case FAST_DIAGONAL_LEFT:
          case FAST_DIAGONAL_RIGHT:
            straight += SEGMENT_DIAGONAL_WIDTH / 2;
            break;
        }
      }
      printf("FastRun: end, st => %.1f\n", straight);
      if (straight > 1.0f) {
        straight_x(straight, v_max, 0);
        straight = 0;
      }
      sc.set_target(0, 0);
      fan.drive(0);
      delay(100);
      //      lg.end();
      sc.disable();
      bz.play(Buzzer::COMPLETE);
      last_path = path;
      path = "";
      while (1) {
        delay(1000);
      }
    }
};

